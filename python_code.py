# from enum import unique
# import time

# start = time.perf_counter()
# print()


#######################################################################
# Напишите функцию friends, которая из списка пар друзей сделает
# словарь, в котором каждому человеку будет сопоставлено множество
# его друзей.

# friends([("Ivan", "Maria"), 
#          ("Ella", "Ivan"), 
#          ("Ivan", "Oleg")]) == \
# {"Ivan":{"Maria", "Ella", "Oleg"},
#  "Ella":{"Ivan"},
#  "Maria": {"Ivan"},
#  "Oleg": {"Ivan"}}

# names = [("Ivan", "Maria"),
#          ("Ella", "Ivan"),
#          ("Ivan", "Oleg")]

# def friends(pairs):
#     friends_dict = {}
#     for pair in pairs:
#         name, friend_name = pair
#         friends_dict[name] = set(friends_dict.get(name, set())) | {friend_name}
#         friends_dict[friend_name] = set(friends_dict.get(friend_name, set())) | {name}

#     return friends_dict


# print(friends(names))


#######################################################################
# Генераторы (comprehensions)

####################################
# Напишите код, который в переменной a создаст список натуральных чисел
# от 1 до 2000 включительно.
# a = [i for i in range(1, 2001)]


####################################
# Напишите код, который в переменной a создаст список чисел от 1 до
# 10000 делящихся на 3
# a = [i for i in range(1, 10001) if i % 3 == 0]


####################################
# Напишите код, который прочитает строчку целых чисел разделенных
# пробелом и положит список этих чисел в переменную a
# a = [int(i) for i in input().split()]


####################################
# Напишите код, который прочитает строчку целых чисел разделенных
# пробелом и создаст в переменной a список квадратов этих чисел в
# переменную a
# a = [int(i) ** 2 for i in input().split()]


####################################
# Напишите код, который прочитает строчку целых чисел разделенных
# пробелом и создаст в переменной a словарь в котором ключом будет
# позиция прочитанного числа, а значением его квадрат.

# Sample Input:
# -35 -95 1 36 -38 -19

# Sample Output:
# {0: 1225, 1: 9025, 2: 1, 3: 1296, 4: 1444, 5: 361}
# a = {k: int(v) ** 2 for k, v in enumerate(input().split())}


####################################
# Вам на вход подается строка пар число-слово вида:
# 1:adf 2:434 90:kdk 0:kdke

# Напишите строчку кода, которая положит в переменную a список строк,
# которые стоят справа от двоеточия.

# Sample Input:
# 70:ztuebs 0:zdhkpq 54:jkyfmo 16:ducsvpq 85:ntsaw

# Sample Output:
# ['ztuebs', 'zdhkpq', 'jkyfmo', 'ducsvpq', 'ntsaw']
# a = [v.split(':')[1] for v in input().split()]


####################################
# Вам на вход подается строка пар число-слово вида:
# 1:adf 2:434 90:kdk 0:kdke

# Напишите строчку кода, которая положит в переменную a словарь, в
# котором числа будут ключами, а строки – значениями.

# Sample Input:
# 73:yjanlou 82:fsbohtg 58:xfuln 1:zshywk

# Sample Output:
# {73: 'yjanlou', 82: 'fsbohtg', 58: 'xfuln', 1: 'zshywk'}
# a = {int(k) : v for k, v in [x.split(':') for x in input().split()]}


####################################
# Данные в этой задаче устроены так: число в первой строчке показывает
# сколько еще строчек с числами нужно прочитать. Например:
# 5
# 4
# -10
# 9
# 2
# 3

# В примере выше сначала обозначено количество чисел, потом сами числа.
# Напишите строчку кода, которая прочитает все числа и напечатает их
# сумму. 

# Да, в этой задаче, в отличие от предыдущих, вам нужно самим вызывать
# функцию print.

# Sample Input:
# 5
# 4
# -10
# 9
# 2
# 3

# Sample Output:
# 8
# print(sum(int(input()) for _ in range(int(input()))))


####################################
# Выведите одной строчкой кода на печать квадрат из цифр как в примере. 

# Уложитесь в 100 символов.
# Вам поможет оператор '%'
# Не используйте символ переноса строки "\n".

# Sample Input:

# Sample Output:
# 0123456789
# 1234567890
# 2345678901
# 3456789012
# 4567890123
# 5678901234
# 6789012345
# 7890123456
# 8901234567
# 9012345678

# print([f'{i}\n' for i in range(10) for j in range(10)])  # TODO


# print()
# print(time.perf_counter() - start)
