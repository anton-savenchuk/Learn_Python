# from enum import unique
# import time

# start = time.perf_counter()
# print()


#######################################################################
# Напишите функцию friends, которая из списка пар друзей сделает
# словарь, в котором каждому человеку будет сопоставлено множество
# его друзей.

# friends([("Ivan", "Maria"),
#          ("Ella", "Ivan"),
#          ("Ivan", "Oleg")]) == \
# {"Ivan":{"Maria", "Ella", "Oleg"},
#  "Ella":{"Ivan"},
#  "Maria": {"Ivan"},
#  "Oleg": {"Ivan"}}

# names = [("Ivan", "Maria"),
#          ("Ella", "Ivan"),
#          ("Ivan", "Oleg")]

# def friends(pairs):
#     friends_dict = {}
#     for pair in pairs:
#         name, friend_name = pair
#         friends_dict[name] = set(friends_dict.get(name, set())) | {friend_name}
#         friends_dict[friend_name] = set(friends_dict.get(friend_name, set())) | {name}

#     return friends_dict


# print(friends(names))



#######################################################################
# Генераторы (comprehensions)

####################################
# Напишите код, который в переменной a создаст список натуральных чисел
# от 1 до 2000 включительно.
# a = [i for i in range(1, 2001)]


####################################
# Напишите код, который в переменной a создаст список чисел от 1 до
# 10000 делящихся на 3
# a = [i for i in range(1, 10001) if i % 3 == 0]


####################################
# Напишите код, который прочитает строчку целых чисел разделенных
# пробелом и положит список этих чисел в переменную a
# a = [int(i) for i in input().split()]


####################################
# Напишите код, который прочитает строчку целых чисел разделенных
# пробелом и создаст в переменной a список квадратов этих чисел в
# переменную a
# a = [int(i) ** 2 for i in input().split()]


####################################
# Напишите код, который прочитает строчку целых чисел разделенных
# пробелом и создаст в переменной a словарь в котором ключом будет
# позиция прочитанного числа, а значением его квадрат.

# Sample Input:
# -35 -95 1 36 -38 -19

# Sample Output:
# {0: 1225, 1: 9025, 2: 1, 3: 1296, 4: 1444, 5: 361}
# a = {k: int(v) ** 2 for k, v in enumerate(input().split())}


####################################
# Вам на вход подается строка пар число-слово вида:
# 1:adf 2:434 90:kdk 0:kdke

# Напишите строчку кода, которая положит в переменную a список строк,
# которые стоят справа от двоеточия.

# Sample Input:
# 70:ztuebs 0:zdhkpq 54:jkyfmo 16:ducsvpq 85:ntsaw

# Sample Output:
# ['ztuebs', 'zdhkpq', 'jkyfmo', 'ducsvpq', 'ntsaw']
# a = [v.split(':')[1] for v in input().split()]


####################################
# Вам на вход подается строка пар число-слово вида:
# 1:adf 2:434 90:kdk 0:kdke

# Напишите строчку кода, которая положит в переменную a словарь, в
# котором числа будут ключами, а строки – значениями.

# Sample Input:
# 73:yjanlou 82:fsbohtg 58:xfuln 1:zshywk

# Sample Output:
# {73: 'yjanlou', 82: 'fsbohtg', 58: 'xfuln', 1: 'zshywk'}
# a = {int(k) : v for k, v in [x.split(':') for x in input().split()]}


####################################
# Данные в этой задаче устроены так: число в первой строчке показывает
# сколько еще строчек с числами нужно прочитать. Например:
# 5
# 4
# -10
# 9
# 2
# 3

# В примере выше сначала обозначено количество чисел, потом сами числа.
# Напишите строчку кода, которая прочитает все числа и напечатает их
# сумму.

# Да, в этой задаче, в отличие от предыдущих, вам нужно самим вызывать
# функцию print.

# Sample Input:
# 5
# 4
# -10
# 9
# 2
# 3

# Sample Output:
# 8
# print(sum(int(input()) for _ in range(int(input()))))


####################################
# Выведите одной строчкой кода на печать квадрат из цифр как в примере.

# Уложитесь в 100 символов.
# Вам поможет оператор '%'
# Не используйте символ переноса строки "\n".

# Sample Input:

# Sample Output:
# 0123456789
# 1234567890
# 2345678901
# 3456789012
# 4567890123
# 5678901234
# 6789012345
# 7890123456
# 8901234567
# 9012345678

# [print(''.join([str((i+j) % 10) for i in range(10)])) for j in range(10)]


####################################
# Выведите на печать все простые числа до 1000 через пробел

# Ограничьтесь одной строкой и 200 символами.

# Sample Input:

# Sample Output:
# 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97
# 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191
# 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283
# 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401
# 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509
# 521 523 541 547 557 563 569 571 577 587 593 599 601 607 613 617 619 631
# 641 643 647 653 659 661 673 677 683 691 701 709 719 727 733 739 743 751
# 757 761 769 773 787 797 809 811 821 823 827 829 839 853 857 859 863 877
# 881 883 887 907 911 919 929 937 941 947 953 967 971 977 983 991 997

# print(*[j for j in range(2, 1001) if all(j % i for i in range(2, j))])



#######################################################################
# Операции над множествами. Сравнение множеств

####################################
# Вводятся два списка целых чисел каждый с новой строки (в строке наборы
# чисел через пробел). Необходимо выбрать и отобразить на экране
# уникальные числа, присутствующие и в первом и во втором списках
# одновременно. Результат выведите на экран в виде строки чисел,
# записанных по возрастанию через пробел, используя команду
# (здесь s - это множество):

# print(*sorted(s))

# P. S. О функции sorted мы еще будем говорить, а также об операторе *.
# Пока просто запомните такую возможность сортировки и вывода
# произвольных коллекций на экран.

# Sample Input:
# 8 11 12 15 -2
# 4 11 10 15 -5 1 -2

# Sample Output:
# -2 11 15
s = set(input().split()) & set(input().split())
print(*sorted(s))

# print()
# print(time.perf_counter() - start)
